q()
install.packages("xlsx")
install.packages("XML")
install.packages("jsonlite")
install.packages("data.table")
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library("rhdf5")
install.packages("httr")
install.packages("plyr")
install.packages("Hmisc")
install.packages("dplyr")
install.packages("tidyr")
install.packages("stringr")
install.packages("lubridate")
install.packages("readr")
q()
ls
ls()
getwd()
setwd("code/r")
getwd()
dir()
setwd("artOfR/")
dir()
setwd("..")
dir()
rnorm(5)
?rnorm
norm(5,5)
rnorm(5,5)
?sd
sd()
sd
sd(9)
Nile
n <- Nile
n
mean(n)
sd(n)
min(n)
max(n)
x <- c(5,6,4,3,7)
sd(x)
mean(x)
5 + 4.5
q()
rm(n,x)
args(lapply)
x <- c(1,2,3)
typeof(x)
str(x)
attrib(x)
class(x)
x <- c(x,4)
length(x)
typeof(x)
x <- x * 2
x
xf <- factor(x)
xf
xf[2]
z <- as.numeric(levels(xf)[xf])
levels(xf)[xf][3]
cat <- c("m","w","n","m")
tapply(x,cat,mean)
rm(list = ls())
q()
install.packages(c("BH", "colorspace", "curl", "ggplot2", "hms", "knitr", "Rcpp", "scales", "XML", "yaml"))
rm(n,x)
sqlite3
rm(n,x)
q()
Sys.getenv("path")
system('g++ -v')
system('where make')
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
cat('Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")',
file = file.path(Sys.getenv("HOME"), ".Rprofile"),
sep = "\n", append = TRUE)
cat(readLines(M), sep = "\n")
cat("\nCXXFLAGS += -Wno-ignored-attributes -Wno-deprecated-declarations",
file = M, sep = "\n", append = TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
q()
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # should be 10
library('rstan')
rm(fx,n,x)
install.packages(c("coda","mvtnorm","devtools"))
library(devtools)
devtools::install_github("rmcelreath/rethinking")
q()
swirl
install.packages("swirl")
swirl()
library(swirl)
swirl()
install_course("Exploratory Data Analysis")
install_course("Getting and Cleaning Data")
0
.q
exit
nxt()
ls
swirl()
q()
BiocInstaller::biocLite("RColorBrewer")
q()
?dbinom
dbinom(6,9,0.5)
library(rstan)
library(rethinking)
rethink_cmyk
ls
3!
factorial(3)
f(3)
choose(9,6)
?choose
exit
q()
p_grid <- seq( from=0, to=1, length.out = 20 )
prior <- rep(1, 20)
likelihood <- dbinom(6, size = 9, prob = p_grid)
rm(likelihood)
options(scipen = 999)
likelihood <- dbinom(6, size = 9, prob = p_grid)
likelihood
unstd.posterior <- likelihood * prior
posterior <- unstd.posterior / sum(unstd.posterior)
plot( p_grid, posterior , type = 'b', xlab = "probability of water", ylab = "posterior probability")
p_grid <- seq( from=0, to=1, length.out = 20 )
prior <- rep(1, 20)
likelihood <- dbinom(6, size = 9, prob = p_grid)
unstd.posterior <- likelihood * prior
posterior <- unstd.posterior / sum(unstd.posterior)
samples <- sample( p_grid, prob = posterior, size = 1e4, replace = T )
posterior
plot(samples)
library(rethinking)
dens(samples)
q()
setwd("~/code/r/coursera/20170213_reprodRsrch/RepData_PeerAssessment1")
library(dplyr)
act <- read.csv("data/activity.csv", header = T)
act$date <- as.Date(as.character(act$date), "%Y-%m-%d")
meanStepPerDay <- aggregate(act[,1], list(act$date), mean)
names(meanStepPerDay) <- c("date","mean.steps")
totalStepPerDay <- aggregate(act[,1], list(act$date), sum)
names(totalStepPerDay) <- c("date", "total.steps")
act_filtered <- filter(act, steps!= 0 & !is.na(steps))
medianStepPerDay <- aggregate(act_filtered[,1], list(act_filtered$date), median)
names(medianStepPerDay) <- c("date","median.steps")
hist(totalStepPerDay$total.steps, xlab = "Total Steps Per Day")
rm(meanStepPerDay,medianStepPerDay)
rm(act_filtered)
mean(totalStepPerDay)
totalStepPerDay
?mean
mean(totalStepPerDay, trim = 1, na.rm = T)
View(totalStepPerDay)
View(totalStepPerDay$total.steps, na.rm = T)
mean(totalStepPerDay$total.steps, na.rm = T)
median(totalStepPerDay$total.steps, na.rm = T)
byInterval <- group_by(act, interval)
intervalAv <- summarize(byInterval, intrvalMean=mean(steps, na.rm = T))
iaTS <- ts(intervalAv$intrvalMean)
plot.ts(iaTS, type="l")
avgMax <- which.max(intervalAv$interval)
intervalAv$interval[avgMax,c(2,3,6)]
View(intervalAv)
View(act)
View(intervalAv)
intervalAv$interval[avgMax,]
intervalAv[avgMax,]
avgMax <- which.max(intervalAv$intrvalMean)
intervalAv[avgMax,]
act <- read.csv("data/activity.csv", header = T)
act$date <- as.Date(as.character(act$date), "%Y-%m-%d")
byInterval <- group_by(act, interval)
intervalAv <- summarize(byInterval, intrvalMean=mean(steps, na.rm = T))
iaTS <- ts(intervalAv$intrvalMean)
plot.ts(iaTS, type="l")
library(plyr)
library(plyr)
act <- read.csv("data/activity.csv", header = T)
act$date <- as.Date(as.character(act$date), "%Y-%m-%d")
View(act)
is.na(act$steps)
sum(is.na(act$steps))
meanStepPerDay <- aggregate(act[,1], list(act$date), mean)
names(meanStepPerDay) <- c("date","mean.steps")
View(meanStepPerDay)
meanStepPerDay$mean.steps[is.na(meanStepPerDay$mean.steps)] = mean(meanStepPerDay$mean.steps, na.rm = T)
View(meanStepPerDay)
act_imputed <- arrange(join(act,meanStepPerDay), date)
View(act_imputed)
View(act_imputed)
act_imputed$steps[is.na(act_imputed$steps)] = act_imputed$mean.steps
View(act_imputed)
act_imputed$weekday <- weekdays(act_imputed$date)
act_imputed$weekday  <- ifelse(act_imputed$weekday %in% c("Sunday","Saturday"), "weekend", "weekday")
View(act_imputed)
act_weekend <- filter(act_imputed, weekday == "weekend")
View(act_weekend)
byInterval2 <- group_by(act_weekend, interval)
intervalAv2 <- summarize(byInterval, intrvalMean=mean(steps, na.rm = T))
intervalAv2 <- summarize(byInterval2, intrvalMean=mean(steps, na.rm = T))
q()
